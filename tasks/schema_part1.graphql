enum CountryCode{
  RU
  UA
  BY
  KZ
}


type Payment{
  paymentTypeId: String
  paymentType: String
  paidAt: String
  paymentAmount: String
  comment: String
}



type Expenses{
  period: String
  sum: String
  articleCosts: ID
  comment: String
}



type UserGroup @model
@auth (
  rules: [
    { allow: private, provider: userPools, operations: [read, update, delete, create] }
  ]
){
  id: ID!,
  name: String!
  code: String!
  rights: [Rights]
  isManager: Boolean
  beakdownOrderTypes: [String] 
  breakdownSites: [String]   
  makeBreakdownByOrderMethods: Boolean
  breakdownOrderMethods: [String] 
  isDeliveryMen: Boolean  # ответственный за доставку
  deliveryTypes: [String]
  restrictByDeliveryTypes: Boolean # предоставлять доступ...
  orderAccess: OrderAccess!
}

type OrderTypeIns{
  id: ID
  name: String
  
}

type SitesIns{
  id: ID
  name: String
}

type orderMethodsIns{
  id: ID
  name: String
}

type DeliveryTypesIns{
  id: ID
  name: String
}

enum OrderAccess{
  full                        # ко всем заказам и клиентам
  only_mine                   # только к своим заказам и клиентам
  by_order_types_and_sites    # только к заказам и клиентам указанных типов 
}

enum Rights{
  ROLE_ORDER_VIEW
  ROLE_ORDER_CREATE
  ROLE_ORDER_EDIT
  ROLE_ORDER_DELETE
  ROLE_ORDER_PRODUCTS_DELETE
  ROLE_ORDER_EXPORT
  ROLE_ORDER_COMBINE
  ROLE_ORDER_COPY
  ROLE_ORDER_SPLIT
  ROLE_CUSTOMER_VIEW
  ROLE_CUSTOMER_CREATE
  ROLE_CUSTOMER_EDIT
  ROLE_CUSTOMER_DELETE
  ROLE_CUSTOMER_EXPORT
  ROLE_CUSTOMER_TAG_CREATE
  ROLE_MANAGER_VIEW
  ROLE_MANAGER_EXPORT
  ROLE_ANALYTICS_ORDER_VIEW
  ROLE_ANALYTICS_CUSTOMER_VIEW
  ROLE_ANALYTICS_MANAGER_VIEW
  ROLE_ANALYTICS_PRODUCT_VIEW
  ROLE_ANALYTICS_COMMUNICATION_VIEW
  ROLE_ANALYTICS_FINANCE_VIEW
  ROLE_WEB_ANALYTICS_VIEW
  ROLE_PRODUCT_VIEW
  ROLE_PRODUCT_EXPORT
  ROLE_PRODUCT_EDIT
  ROLE_PRODUCT_CREATE
  ROLE_PRODUCT_DELETE
  ROLE_INVENTORY_EDIT
  ROLE_INVENTORY_EXPORT
  ROLE_PRODUCT_GROUP_VIEW
  ROLE_PRODUCT_GROUP_CREATE
  ROLE_PRODUCT_GROUP_DELETE
  ROLE_PRODUCT_GROUP_EDIT
  ROLE_TASK_MINE
  ROLE_TASK_VIEW
  ROLE_TASK_CREATE
  ROLE_TASK_OWN_EDIT
  ROLE_TASK_EDIT
  ROLE_TASK_DELETE
  ROLE_NOTIFICATION_SEND
  ROLE_SMS_VIEW
  ROLE_LETTER_VIEW
  ROLE_COMMON_MANAGE_FINANCES
  ROLE_ORDER_CHANGE_MANAGER
  ROLE_COST_VIEW
  ROLE_COST_CREATE
  ROLE_COST_EDIT
  ROLE_COST_DELETE
  ROLE_COST_EXPORT
  ROLE_DELIVERY_SHIPMENT_VIEW
  ROLE_DELIVERY_SHIPMENT_EDIT
  ROLE_DELIVERY_SHIPMENT_CREATE
  ROLE_SUPPORT_TICKET
  ROLE_SUPPORT_ONLINE_CHAT
  ROLE_PAYMENT_REFUND
  ROLE_LETTER_SEND
  ROLE_SMS_SEND
  ROLE_TELEPHONY_CALL_VIEW_SELF
  ROLE_CUSTOMER_PERSONAL_DISCOUNT_EDIT
  ROLE_ANALYTICS_MARKETING_VIEW
  ROLE_TELEPHONY_CALL_VIEW_ALL
}


type User @model
@auth (
  rules: [
    { allow: public, provider: apiKey, operations: [read,update] }
    { allow: private, provider: userPools, operations: [read, update, delete, create] }
  ]
)
{
  id: ID!
  lastOrderDate: String
  lastName: String
  firstName: String!
  patronymic: String
  email: String!
  position: String
  phone: String
  active: Boolean    
  isAdmin: Boolean
  groups: [String] 
  emailAlert: Boolean
  alertsWithSound: Boolean 
  online: Boolean
  status: UserStatus
  averagCheck: Float!
  salesAmount: Float!
  totalAmountOfOrders: Int!
  orderNumbers: [String]
}

enum UserStatus{
  free
  busy
  dinner
  break
}

type GroupsItems {
  groupName: String!
  characterCode: String!
  rights: [Rights]
}

enum SectionAfterLogin{
  S    # Продажи
  A    # Аналитика
}

enum TwoFactorAuth{
  D # Отключена  / не использовать
}



type OrderType @model
@auth (
  rules: [
    { allow: private, provider: userPools, operations: [read, update, delete, create] }
  ]
){
  id: ID!
  name: String!
  code: String!
  active: Boolean
  defaultForCRM: Boolean
  defaultForAPI: Boolean
  ordering: Int!
}

type DeliveryType @model
@auth (
  rules: [
    { allow: private, provider: userPools, operations: [read, update, delete, create] }
  ]
){
  id: ID!
  name: String!
  code: String!
  integrationCode: IntegrationCode
  active: Boolean
  defaultForCrm: Boolean
  description: String
  availableCountries: [CountryCode]  
  services: [Services]
  vatRate: VatRate
  defaultCost: String!
  defaultNetCost: String!
  calculationType: CalculationType!
  costDependsOnRegionWeight: Boolean
  costDependsOnDateTime: Boolean
  codMarkup: String
  limitByRegions: Boolean
  regionWeightCostConditions: [RegionWeightCostConditions]
  dateTimeCostConditions: [DateTimeCostConditions]
  paymentTypes: [PaymentTypesItem]
}

type PaymentTypesItem{
  paymentTypeCode: String
  paymentTypeName:  String
  allowToUse: Boolean  
  cashOnDelivery: Boolean
}


type DateTimeCostConditions{
  days: [Days]
  timeStart: String
  timeEnd: String
  value: String
  netValue: String
}

enum Days{
  Mo # Понедельник
  Tu # Вторник
  We # Среда
  Th # Четверг
  Fr # Пятница
  Sa # Суббота
  Su # Воскресенье
}

type RegionWeightCostConditions{
  location:  [LocationItem]
  weightFrom: String
  weightTo: String
  orderPriceFrom: String
  orderPriceTo: String
  netValueType: NetValueType
  netValue: String
  value: String
}
enum NetValueType{
  fixed              #  фиксированная
  subtract           #  стоимость минус
  subtract_percent   #  стоимость минус  %
}
type LocationItem{
  countryId: ID
  region: [RegionItem]
}


type RegionItem{
  regionId: ID
  regionName: String
  locality: [LocalityItem]   
}

type LocalityItem{
  localityId: ID
  localityName: String
}


type Services {
  name: String!
  characterCode: String!
  activity: Boolean
}


enum IntegrationCode {
  W   # без интеграции
  D    # доставка курьером
}

enum VatRate{
  WITHOUT_NDS # Без НДС
  TN # 20%
  EI # 18%
  TW # 12%
  TE # 10%
  SE # 7%
  FI # 0.5%
  NU # 0%
}

enum CalculationType{
  S #  Static
  D #  Dynamic

}

type PaymentStatus @model
@auth (
  rules: [
    { allow: private, provider: userPools, operations: [read, update, delete, create] }
  ]
){
  id: ID!
  name: String!
  code: String!
  active: Boolean
  defaultForCRM: Boolean
  defaultForApi: Boolean
  paymentComplete: Boolean
  ordering: Int
  description: String
  paymentTypes: [String]
}


type PaymentType @model
@auth (
  rules: [
    { allow: private, provider: userPools, operations: [read, update, delete, create] }
  ]
){
  id: ID!
  name: String!
  code: String!
  active: Boolean
  defaultForCRM: Boolean
  defaultForAPI: Boolean
  description: String
  paymentStatuses:[String]
}


enum IntegrateWith{
  W    # Без интеграции
}

type PaymentStatusesItem{
  paymentSatuseId: ID
  paymentSatuseName: String
}



type WareHouse @model
@auth (
  rules: [
    { allow: private, provider: userPools, operations: [read, update, delete, create] }
  ]
){
  id: ID!
  name: String!
  typeWarehouse: TypeWarehouse
  characterCode: String
  activity: Boolean
  description: String
  residueType: ResidueType
  ordering: Int

  country: ID
  regionId: ID
  region: Region @hasOne(fields: ["regionId"])
  cityId: ID
  city: City @hasOne(fields: ["cityId"])
  street: String   
  house: String
  structure: String
  frame: String
  office: String
  address: String
  postcode: String
  underground: String
  coordinates: String

  weekOpeningHours: WeekOpeningHours

  contact: String
  phone: String
  email: String

}

enum TypeWarehouse{
  store_type_retail      # розничный магазин
  store_type_online      # интернет-магазин
  store_type_warehouse   # склад
  store_type_supplier    # склад поставщика
}

type WeekOpeningHours{
  days: [Days]
  timeStart: String
  timeEnd: String
  value: String
  netValue: String
}

enum ResidueType{
  numerical   
  cash
}



type Shop @model
@auth (
  rules: [
    { allow: private, provider: userPools, operations: [read, update, delete, create] }
  ]
){
  id: ID!
  name: String!
  url: String!
  code: String! 
  country: ID
  description: String
  active: Boolean
  ordering: Int
  phone: String 
  address: String
  postCode: String
  
  warehousesAvailable: WarehousesAvailable
  excludedStores: [ExcludedStoresItem]

}

enum WarehousesAvailable{
   Y # да
   N # нет
}
type ExcludedStoresItem{
  wareHouseId: ID
  wareHouseName: String
}



type Contragent @model
@auth (
  rules: [
    { allow: private, provider: userPools, operations: [read, update, delete, create] }
  ]
){
   id:ID!
   code: String!
   countryId: ID!
   vatRate: VatRate
   contragentType: ContragentType!
   INN: String 
   legalName: String
   OKPO: String
   KPP: String
   OGRNIP: String
   legalAddress: String
   OGRN: String
   certificateNumber: String
   certificateDate: String
   BIK: String
   corrAccount: String
   bank: String
   bankAccount: String
   bankAddress: String
}

enum ContragentType{
  legal_entity
  enterpreneur
}


type OrderMethod @model
@auth (
  rules: [
    { allow: private, provider: userPools, operations: [read, update, delete, create] }
  ]
){
  id: ID!
  name: String!
  code: String!
  active: Boolean
  defaultForCRM: Boolean
  defaultForAPI:Boolean
}

